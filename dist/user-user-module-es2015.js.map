{"version":3,"sources":["webpack:///./src/app/user/login.component.html","webpack:///./src/app/user/profile.component.html","webpack:///./src/app/user/login.component.ts","webpack:///./src/app/user/profile.component.ts","webpack:///./src/app/user/user.module.ts","webpack:///./src/app/user/user.routes.ts"],"names":[],"mappings":"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","file":"user-user-module-es2015.js","sourcesContent":["module.exports = \"<h1>Login</h1>\\r\\n<hr />\\r\\n<div class=\\\"col-md-4\\\">\\r\\n  <form\\r\\n    autocomplete=\\\"off\\\"\\r\\n    #loginForm=\\\"ngForm\\\"\\r\\n    (ngSubmit)=\\\"login(loginForm.value)\\\"\\r\\n  >\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"userName\\\">User Name:</label>\\r\\n      <em\\r\\n        *ngIf=\\\"\\r\\n          loginForm.controls.userName?.invalid &&\\r\\n          (loginForm.controls.userName?.touched || mouseOverLogin)\\r\\n        \\\"\\r\\n        >Required</em\\r\\n      >\\r\\n      <input\\r\\n        (ngModel)=\\\"(userName)\\\"\\r\\n        name=\\\"userName\\\"\\r\\n        id=\\\"userName\\\"\\r\\n        type=\\\"text\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        placeholder=\\\"User Name...\\\"\\r\\n        required\\r\\n      />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"password\\\">Password:</label>\\r\\n      <em\\r\\n        *ngIf=\\\"\\r\\n          loginForm.controls.password?.invalid &&\\r\\n          (loginForm.controls.password?.touched || mouseOverLogin)\\r\\n        \\\"\\r\\n        >Required</em\\r\\n      >\\r\\n      <input\\r\\n        (ngModel)=\\\"(password)\\\"\\r\\n        name=\\\"password\\\"\\r\\n        id=\\\"password\\\"\\r\\n        type=\\\"password\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        placeholder=\\\"Password...\\\"\\r\\n        required\\r\\n      />\\r\\n    </div>\\r\\n    <span\\r\\n      (mouseenter)=\\\"mouseOverLogin = true\\\"\\r\\n      (mouseleave)=\\\"mouseOverLogin = false\\\"\\r\\n    >\\r\\n      <button\\r\\n        type=\\\"submit\\\"\\r\\n        class=\\\"btn btn-primary\\\"\\r\\n        [disabled]=\\\"loginForm.invalid\\\"\\r\\n      >\\r\\n        Login\\r\\n      </button>\\r\\n    </span>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"cancel()\\\">\\r\\n      Cancel\\r\\n    </button>\\r\\n  </form>\\r\\n  <br />\\r\\n  <div *ngIf=\\\"loginInvalid\\\" class=\\\"alert alert-danger\\\">Invalid Login Info</div>\\r\\n</div>\\r\\n\"","module.exports = \"<div>\\r\\n  <h1>Edit Your Profile</h1>\\r\\n  <hr />\\r\\n  <div class=\\\"col-md-4\\\">\\r\\n    <form\\r\\n      autocomplete=\\\"off\\\"\\r\\n      novalidate\\r\\n      [formGroup]=\\\"profileForm\\\"\\r\\n      (ngSubmit)=\\\"saveProfile(profileForm.value)\\\"\\r\\n    >\\r\\n      <div\\r\\n        class=\\\"form-group\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          error: !validateFirstName()\\r\\n        }\\\"\\r\\n      >\\r\\n        <label for=\\\"firstName\\\">First Name:</label>\\r\\n        <em\\r\\n          *ngIf=\\\"\\r\\n            !validateFirstName() &&\\r\\n            profileForm.controls.firstName.errors.required\\r\\n          \\\"\\r\\n          >Required</em\\r\\n        >\\r\\n        <em\\r\\n          *ngIf=\\\"\\r\\n            !validateFirstName() &&\\r\\n            profileForm.controls.firstName.errors.pattern\\r\\n          \\\"\\r\\n          >Must start with a letter</em\\r\\n        >\\r\\n        <input\\r\\n          formControlName=\\\"firstName\\\"\\r\\n          id=\\\"firstName\\\"\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          placeholder=\\\"First Name...\\\"\\r\\n        />\\r\\n      </div>\\r\\n      <div\\r\\n        class=\\\"form-group\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          error: !validateLastName()\\r\\n        }\\\"\\r\\n      >\\r\\n        <label for=\\\"lastName\\\">Last Name:</label>\\r\\n        <em *ngIf=\\\"!validateLastName()\\\">Required</em>\\r\\n        <input\\r\\n          formControlName=\\\"lastName\\\"\\r\\n          id=\\\"lastName\\\"\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          placeholder=\\\"Last Name...\\\"\\r\\n        />\\r\\n      </div>\\r\\n\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"cancel()\\\">\\r\\n        Cancel\\r\\n      </button>\\r\\n      <button\\r\\n        type=\\\"submit\\\"\\r\\n        class=\\\"btn btn-warning\\\"\\r\\n        (click)=\\\"logout()\\\"\\r\\n        style=\\\"float:right;\\\"\\r\\n      >\\r\\n        Log Out\\r\\n      </button>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Component({\r\n  templateUrl: \"./login.component.html\",\r\n  styles: [\r\n    `\r\n      em {\r\n        float: right;\r\n        color: #e05c65;\r\n        padding-left: 10px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class LoginComponent {\r\n  userName;\r\n  password;\r\n  mouseOverLogin;\r\n  loginInvalid = false;\r\n  constructor(private auth: AuthService, private router: Router) {}\r\n\r\n  login(formValues) {\r\n    this.auth\r\n      .loginUser(formValues.userName, formValues.password)\r\n      .subscribe(res => {\r\n        if (!res) {\r\n          this.loginInvalid = true;\r\n        } else {\r\n          this.router.navigate([\"events\"]);\r\n        }\r\n      });\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate([\"events\"]);\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { TOASTR_TOKEN, Toastr } from \"../common/toastr.service\";\r\n\r\n@Component({\r\n  templateUrl: `./profile.component.html`,\r\n  styles: [\r\n    `\r\n      em {\r\n        float: right;\r\n        color: #e05c65;\r\n        padding-left: 10px;\r\n      }\r\n      .error input {\r\n        background-color: #e3c3c5;\r\n      }\r\n      .error ::-webkit-input-placeholder,\r\n      .error :ms-input-placeholder,\r\n      .error ::-moz-placeholder,\r\n      .error :-moz-placeholder {\r\n        color: #999;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  profileForm: FormGroup;\r\n  private firstName: FormControl;\r\n  private lastName: FormControl;\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router,\r\n    @Inject(TOASTR_TOKEN) private toastr: Toastr\r\n  ) {}\r\n  ngOnInit() {\r\n    this.firstName = new FormControl(this.auth.currentUser.firstName, [\r\n      Validators.required,\r\n      Validators.pattern(\"[a-zA-Z].*\")\r\n    ]);\r\n    this.lastName = new FormControl(\r\n      this.auth.currentUser.lastName,\r\n      Validators.required\r\n    );\r\n    this.profileForm = new FormGroup({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    });\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.firstName.valid || this.firstName.untouched;\r\n  }\r\n\r\n  validatelastName() {\r\n    return this.lastName.valid || this.lastName.untouched;\r\n  }\r\n\r\n  saveProfile(formValues) {\r\n    if (this.profileForm.valid) {\r\n      this.auth\r\n        .updateCurrentUser(formValues.firstName, formValues.lastName)\r\n        .subscribe(() => {\r\n          this.toastr.success(\"Profile Saved\");\r\n        });\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate([\"events\"]);\r\n  }\r\n\r\n  logout() {\r\n    this.auth.logout().subscribe(() => {\r\n      this.router.navigate([\"/user/login\"]);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { userRoutes } from \"./user.routes\";\r\nimport { ProfileComponent } from \"./profile.component\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [ProfileComponent, LoginComponent],\r\n  providers: []\r\n})\r\nexport class UserModule {}\r\n","import { Routes } from \"@angular/router\";\r\nimport { ProfileComponent } from \"./profile.component\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nexport const userRoutes: Routes = [\r\n  { path: \"profile\", component: ProfileComponent },\r\n  { path: \"login\", component: LoginComponent }\r\n];\r\n"],"sourceRoot":""}